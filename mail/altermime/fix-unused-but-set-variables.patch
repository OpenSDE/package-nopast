# --- SDE-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
#
# Filename: package/.../altermime/fix-unused-but-set-variables.patch
# Copyright (C) 2013 The OpenSDE Project
#
# More information can be found in the files COPYING and README.
#
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- SDE-COPYRIGHT-NOTE-END ---

Description: Fix compiler warnings for 'unused-but-set-variable' causing FTBFS with -Werror and GCC 4.6
Author: Julien Valroff <julien@debian.org>
Bug-Debian: http://bugs.debian.org/625307

--- ./MIME_headers.c
+++ ./MIME_headers.c
@@ -1081,12 +1081,10 @@
 	int linesize=0;
 	int totalsize_original=0;
 	int result = 0;
-	int firstline = 1;
 	int search_count=0;
 	char *tmp;
 	char *tmp_original;
 	char *fget_result = NULL;
-	char *headerline_end;
 	char *p;
 	char *linestart;
 	char *lineend;
@@ -1184,7 +1182,6 @@
 				glb.headerline = tmp;
 				totalsize = linesize;
 				PLD_strncpy(glb.headerline, linestart, (linesize +1));
-				headerline_end = glb.headerline +totalsize;
 			} // If the global headerline is currently NULL
 			else
 			{
@@ -1271,7 +1268,6 @@
 				FFGET_SDL_MODE = 0;
 			} // FFGET_doubleCR test
 
-			firstline = 0;
 		} // While reading more headers from the source file.
 
 
@@ -2724,13 +2720,13 @@
 {
 	/** scan through our headers string looking for information that is
 	  ** valid **/
-	char *safeh, *h, *safehl;
+	char *h, *safehl;
 	char *current_header_position;
 	int headerlength;
 
 	if (MIMEH_DNORMAL) LOGGER_log("%s:%d:MIMEH_parse_headers:DEBUG: Start [hinfo=%p]\n",FL, hinfo);
 
-	safeh = h = headers;
+	h = headers;
 
 	/** Duplicate the headers for processing - this way we don't 'taint' the
 	** original headers during our searching / altering. **/
--- ./mime_alter.c
+++ ./mime_alter.c
@@ -2432,7 +2432,6 @@
 	char mpackold[AM_1K_BUFFER_SIZE+1]="";
 	struct AM_disclaimer_details dd;
 	int result = 0;
-	int segment_read = 0;
 
 	/* create our temp filename */
 	snprintf(mpacktmp,AM_1K_BUFFER_SIZE, "%s.tmp",mpackname);
@@ -2623,7 +2622,6 @@
 				  */
 
 
-			segment_read = 0;
 			if (FFGET_feof(&f)) break;
 
 			// If we've found a boundary and a text content section...
@@ -3698,7 +3696,6 @@
 int AM_attachment_replace_recurse( struct MIMEH_header_info *hinfo, FFGET_FILE *f, FILE *outputfile, regex_t *preg, char *new_attachment_name, int iteration )
 {
 	int result = 0;
-	int boundary_exists=0;
 	size_t bc;
 
 	if (AM_DNORMAL) LOGGER_log("%s:%d:AM_attachment_replace_recurse:DEBUG: Starting: iteration=%d",FL, iteration );
@@ -3776,7 +3773,6 @@
 		{
 			if (AM_DNORMAL)LOGGER_log("%s:%d:AM_attachment_replace_recurse:DEBUG: pushing BS='%s'",FL, hinfo->boundary );
 			BS_push( hinfo->boundary );
-			boundary_exists = 1;
 		}
 
 		// Now, determine if this block/segment is the one which contains our file which we must 'nullify'
