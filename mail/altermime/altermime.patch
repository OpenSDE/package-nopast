# --- SDE-COPYRIGHT-NOTE-BEGIN ---
# This copyright note is auto-generated by ./scripts/Create-CopyPatch.
#
# Filename: package/.../altermime/altermime.patch
# Copyright (C) 2013 The OpenSDE Project
#
# More information can be found in the files COPYING and README.
#
# This patch file is dual-licensed. It is available under the license the
# patched project is licensed under, as long as it is an OpenSource license
# as defined at http://www.opensource.org/ (e.g. BSD, X11) or under the terms
# of the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any later
# version.
# --- SDE-COPYRIGHT-NOTE-END ---

diff -Naur altermime-0.3.10/qpe.c altermime-0.3.10-new/qpe.c
--- ./qpe.c	2008-11-16 09:45:45.000000000 +0100
+++ ./qpe.c	2010-11-24 14:28:43.153334114 +0100
@@ -97,7 +97,7 @@
 				op+= strlen(paragraph);// +3; /** jump the output + =\r\n **/
 				out_remaining-= (strlen(paragraph)); // Was +3, updated to fix Outlook problems
 
-				QPD fprintf(stdout, "Soft break (%d + %d > 76 char) for '%s'\n", current_line_length, charout_size, paragraph);
+				QPD fprintf(stdout, "Soft break (%zd + %d > 76 char) for '%s'\n", current_line_length, charout_size, paragraph);
 				
 				/** reinitialize the paragraph **/
 				paragraph[0] = '\0';
@@ -108,7 +108,7 @@
 			}
 
 			snprintf(pp, pp_remaining, "%s", charout);
-			QPD fprintf(stdout,"charout='%s', size=%d, pp_remain=%d result='%s'\n", charout, charout_size, pp_remaining, paragraph);
+			QPD fprintf(stdout,"charout='%s', size=%d, pp_remain=%zd result='%s'\n", charout, charout_size, pp_remaining, paragraph);
 			pp += charout_size;
 			pp_remaining -= charout_size;
 			p++;
@@ -149,13 +149,13 @@
 	out_size = in_size *3;
 	in_buffer = malloc( sizeof(char) *in_size +1);
 	if (in_buffer == NULL) {
-		QPD fprintf(stdout,"Error allocating %d bytes for input buffer\n", in_size);
+		QPD fprintf(stdout,"Error allocating %zd bytes for input buffer\n", in_size);
 		return -1;
 	}
 
 	out_buffer = malloc( sizeof(char) *out_size *3 +1);
 	if (in_buffer == NULL) {
-		QPD fprintf(stdout,"Error allocating %d bytes for output buffer\n", out_size);
+		QPD fprintf(stdout,"Error allocating %zd bytes for output buffer\n", out_size);
 		return -1;
 	}
 
@@ -169,7 +169,7 @@
 	  ** we segfault ;)  **/
 	*(in_buffer +in_size) = '\0';
 
-	QPD fprintf(stdout,"file %s is loaded, size = %d\n", fname, in_size);
+	QPD fprintf(stdout,"file %s is loaded, size = %zd\n", fname, in_size);
 
 	qp_encode( out_buffer, out_size, in_buffer, in_size );
 

